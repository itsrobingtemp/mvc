{% extends "base.html.twig" %}

{% block title %}Rapporter{% endblock %}

{% block body %}
    <h1>Rapporter</h1>
    <p>Här finns mina redovsiningsrapporter.</p>

    <h1><a href="#kmom01">Kmom01</a></h1>
    <h2>Berätta kort om dina förkunskaper och tidigare erfarenheter kring objektorientering.</h2>

    <p>
      Jag har jobbat en hel del med objektorienterad programmering, dock främst inom generativ konst 
      med Python och Javascript.
    </p>

    <p>
      Att programmera objektorienterat kräver en liten tankeomställning från det funktionella sättet att 
      programmera, men jag gillar det rätt så mycket ändå.
    </p>

    <h2>
      Berätta kort om PHPs modell för klasser och objekt. 
      Vilka är de grunder man behöver veta/förstå för att kunna komma igång och skapa sina första klasser?
    </h2>
    
    <p>
      Det viktigaste för en nybörjare att förstå är antagligen vad en klass och vad ett objekt verkligen är.
      Att en klass kan ses som en ritning innehållande olika attribut och metoder, som man kan skapa objekt av.
    </p>

    <p>
      Därefter är det nog viktigt att kunna själva syntaxet för att skapa klasserna, metoderna, attributen och objekten.
      Kan man detta kan man nog börja skapa sina första klasser, även om man inte vet allt om t.ex. arv, access modifiers etc.
    </p>
    
    <h2>Reflektera kort över den kodbas, koden, strukturen som användes till uppgiften me/report, hur uppfattar du den?</h2>
    
    <p>
      Symfony känns som ett rätt robust ramverk för att bygga upp webbsidor i. Dock känns det aningen "stort" och i mitt fall 
      rätt långsamt att jobba med (kanske beror på att jag använder Windows med WSL2 Ubuntu).
    </p>

    <p>
      Överlag har det dock varit relativt "straight forward" att komma igång med Symfony genom Ubuntu i WSL2 (som jag gillar väldigt mycket just nu).
    </p>
    
    <h2>
      Med tanke på artikeln “PHP The Right Way”, vilka delar in den finner du extra intressanta och värdefulla? 
      Är det några särskilda områden som du känner att du vill veta mer om? 
      Lyft fram några delar av artikeln som du känner mer värdefulla.
    </h2>
    
    <p>
      Jag fastnade främst för kapitlet om "templating", där man förklarar hur "views"-delen i MVC-mönstret ser ut. Detta påminner mig mycket
      om t.ex. den statiska webbsidegeneratorn Hugo, där man bygger upp sina webbsidor i HTML-views och Markdown-data "injectas" in i dessa på ett mycket 
      snyggt sätt genom Go.
    </p>

    <p>
      Även kapitlet "Code Style Guide" gav många bra tips om länkar till hur man skriver PHP på ett snyggt och sammanhängande sätt.
    </p>
    
    <h2>Vilken är din TIL för detta kmom?</h2>

    <p>Min TIL är faktiskt Ubuntu i WSL2, som jag inte har haft koll på innan. Det fungerar väldigt smidigt än så länge.</p>

    <hr>

    <h1><a href="#kmom02">Kmom02</a></h1>
    <h2>Förklara kort de objektorienterade konstruktionerna arv, komposition, interface och trait och hur de används i PHP.</h2>

    <h3>Arv</h3>
    <p>
      När en klass ärver av en annan klass skickas basklassens attribut och metoder över till den ärvande klassen, som sedan kan modifiera dessa eller lägga till fler attribut och metoder.
    </p>

    <h3>Komposition</h3>
    <p>
      Vid komposition "äger" en klass en annan klass, dvs. den ägda klassen skulle inte existera utan den ägande klassen.
    </p>

    <h3>Interface</h3>
    <p>
      Med interface tvingar man en klass som "implement:ar" interfacet att innehålla specifika metoder.
    </p>

    <h3>Trait</h3>
    <p>
      Trait är ett sätt att återanvända attribut och metoder mellan flera klasser utan att ha en "basklass" som vid arv.
    </p>

    <h2>Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden och dina klasser?</h2>

    <p>Jag är hyfsat nöjd med min implementation gällande klasserna. Dock tycker jag själv att jag skulle kunnat lösa korten och dess attribut på ett snyggare sätt, eftersom 
    jag nu använder mig av arrayer där jag tvingas hålla koll på vilket index som är vilket, t.ex. index 0 är kortets value och index 1 är kortets suit.</p>

    <p>Jag skulle även kunna återanvända kod på ett bättre sätt mellan template-filerna, men detta är något jag får se till att spendera mera tid på i fortsättningen.</p>

    <h2>Vilka är dina refelktioner så här långt med att jobb i Symfony med applikationskod enligt MVC?</h2>

    <p>
      MVC-tänket känns rätt logiskt att hålla koll på, och verkar fungera smidigt i Symfony, så det kan jag inte klaga på. Dock tar Symfony väldigt lång tid på sig att ladda mellan uppdateringar i koden, något som jag försökt lösa men inte hittat en lösning på ännu. Sättet jag kör Symfony & PHP på med WSL2 och Ubuntu kanske inte är optimalt.
    </p>

    <h2>Vilken är din TIL för detta kmom?</h2>

    <p>Min TIL är att jag lärt mig mer om hur interface och trait fungerar i PHP.</p>

    <h1><a href="#kmom03">Kmom03</a></h1>
    <h2>Berätta hur det kändes att modellera ett kortspel med flödesdiagram och psuedokod. Var det något som du tror stödjer dig i din problemlösning och tankearbete för att strukturera koden kring en applikation?</h2>

    <p>
      Det kändes rätt bra att lägga upp en liten struktur innan jag började programmera. Dels så hjälpte det mig förstå hur flödet skulle 
      kunna se ut (routes) och att fundera lite på vilka klasser som skulle behövas. Jag följde ganska långt strukturen jag hade lagt upp.
    </p>

    <h2>
      Berätta om din implementation från uppgiften. Hur löste du uppgiften, är du nöjd/missnöjd, vilken förbättringspotential ser du i din koden, dina klasser och applikationen som helhet?
    </h2>

    <p>
      Jag är faktiskt ovanligt nöjd med min lösning för denna uppgift. Jag lyckades med att hålla koden i kontrollerna så minimal som möjligt,
      och istället hålla logiken inuti min TwentyOne-klass. Dessutom känns det rätt bra att hålla all data inuti en och samma array, vilket 
      gör att jag lätt kan hålla reda på datan i session då användaren skickas mellan routsen.
    </p>

    <h2>
      Vilken är din känsla för att koda i ett ramverk som Symfony, så här långt in i kursen?
    </h2>

    <p>
      Som i de tidigare kursmomenten har jag lite problem med prestandan i Symfony, vilket leder till att sidor laddar väldigt trögt. Dock löste jag 
      detta med att skriva en stor del av koden utanför ramverket (i PHP-filer), vilket gick smidigt. För övrigt gillar jag Symfony rätt så bra.
    </p>

    <h3>
      Vilken är din TIL för detta kmom?
    </h3>

    <p>
      Min TIL är att om jag har fortsatta problem med Symfony-prestandan så kan jag skriva koden utanför till en början innan jag implementerar den inuti ramverket.
    </p>

    <h1><a href="#kmom04">Kmom04</a></h1>

    <h2>
      Berätta hur du upplevde att skriva kod som testar annan kod med PHPUnit och hur du upplever phpunit rent allmänt.
    </h2>

    <p>
      Testningen med PHPUnit gick väldigt smidigt tyckte jag. Detta kanske beror på att jag blivit duktigare på objektorienterad 
      programmering, för mina klasser kändes väldigt testbara. Några asserts fick jag Googla upp för att hitta, t.ex. att testa längden (storlek)
      på en array, men detta var inga problem. PHPUnit känns väldigt liknande andra testramverk som t.ex. unittest i Python.
    </p>

    <h2>
      Hur väl lyckades du med kodtäckningen av din kod, lyckades du nå mer än 90% kodtäckning?
    </h2>

    <p>
      Jag lyckades nå ca. 96% kodtäckning med mina tester, vilket jag blev rätt stolt över. Jag skall försöka nå 100% till nästa kursmoment.
    </p>

    <h2>
      Upplever du din egen kod som “testbar kod” eller finns det delar i koden som är mer eller mindre testbar och finns det saker som kan göras för att förbättra kodens testbarhet?
    </h2>

    <p>
      Jag upplever min kod som väldigt testbar för tillfället, mycket mer testbar än den känts i tidigare kurser. Orsaken till detta är 
      att jag skrivit mindre men fler små metoder per klass, och några extra klasser istället för att packa ihop en massa kod i samma klass. Detta 
      tror jag är orsaken till att testningen varit lättare än tidigare.
    </p>

    <h2>
      Valde du att skriva om delar av din kod för att förbättra den eller göra den mer testbar, om så berätta lite hur du tänkte.
    </h2>

    <p>
      Jag behövde faktiskt inte skriva om någon kod alls för att göra den mer testbar. Detta var den redan från start, något som gjorde detta kursmoment 
      lite lättare för mig.
    </p>

    <h2>
      Fundera över om du anser att testbar kod är något som kan identifiera “snygg och ren kod”.
    </h2>

    <p>
      Jag tycker definitivt att "snygg och ren" kod kan göra denn mer testbar. I mitt fall handlar det som tidigare nämnt att dela upp koden i mindre 
      bitar, fler metoder och fler klasser istället för att klumpa ihop den så mycket. Detta tycker jag har gjort min kod hyfsat snygg.
    </p>

    <p>
      Att lätt kunna testa sin kod är något som jag antar är mycket viktigt när det kommer till projekt som når "riktiga" användare och som därför helst 
      inte skall gå sönder.
    </p>

    <h2>
      Vilken är din TIL för detta kmom?
    </h2>

    <p>
      Min TIL är att verkligen försöka tänka innan jag skriver mina klasser för att göra koden testbar.
    </p>

    <h1><a href="#kmom05">Kmom05</a></h1>

    <h2>
      Gick det bra att jobba igenom övningen med Symfony och Doctrine. Något särskilt du tänkte/reagerade på under övningen?
    </h2>

    <p>
      Jag hade lite problem med installationen av Doctrine/SQLite när jag följde guiden. Detta tog en stund att felsöka och lösa, men gick till slut bra. Felmeddelandet 
      var något i stil med "Could not find driver" och det visade sig att det fattades några PHP-extensions som jag installerade och aktiverade i PHP.ini-filen. För 
      övrigt gick det mycket smidigt.
    </p>

    <h2>
      Berätta om din applikation och hur du tänkte när du byggde upp den. Tänkte du något speciellt på användargränssnittet?
    </h2>

    <p>
      Jag följde guiden på Github rätt långt för att få en idé om hur applikationen skulle byggas upp. I användargränssnittet kan man på första sidan se 
      alla böcker i en tabell samt lägga till en ny bok genom ett formulär. Varje bok i tabellen har en knapp för både editering och radering. 
    </p>

    <p>
      Editeringsknappen tar en till en ny sida där man kan editera den specifika boken. Bokens initiella data laddas som placeholders för varje input-fält. 
      Raderingsknappen skickar användaren till en route där boken tas bort, och sedan redirectas användaren tillbaka till första sidan.
    </p>

    <p>
      Varje bok har även en länk till en sida där man kan se data om den specifika boken. På denna sida syns även bokens bild, som är sparad som en URL 
      i databasen.
    </p>

    <h2>Gick det bra att jobba med ORM i CRUD eller vad anser du om det, jämför gärna med andra sätt att jobba med databaser?</h2>

    <p>
      Jag tyckte det var jättesmidigt att använda Doctrine. Att inte behöva skriva sin egen SQL-kod, och istället bara använda metoder för att skapa, hämta, editera, radera data 
      var väldigt skönt. 
    </p>

    <h2>Vad är din uppfattning om ORM så här långt och relatera gärna till andra sätt att jobba med applikationskod mot databaser?</h2>

    <p>
      Som nämnt i tidigare frågan känns det som ett smidigt sätt att både skapa tabeller och använda datan. Det känns som en abstrahering av den annars rätt tidskrävande 
      databasprogrammeringen (speciellt om man inte är jätteduktigt på det än, som jag). Jag skulle kunna jämföra det med användning av t.ex. Firebase i Javascript, där 
      man får färdigskapade metoder som hjälper en att hantera datan på olika sätt.
    </p>

    <h2>Vilken är din TIL för detta kmom?</h2>

    <p>Min TIL är att hålla koll på mina PHP-extensions.</p>

    <h1><a href="#kmom06">Kmom06</a></h1>

    <h2>Hur uppfattade du verktyget phpmetrics och fann du några särskilda bitar mer värdefulla än andra? Var det några särskilda metrics eller bilder du uppskattade?</h2>

    <p>
      Jag tycker att PHPMetrics var väldigt lätt att komma igång med, och var, till skillnad från Scrutinizer, ett lokalt verktyg som man kan lita på att kör när som helst 
      utan att behöva tänka på om man går över någon gratisgräns eller att verktyget ligger nere.
    </p>

    <p>
      Dashboarden när man öppnar index-filen ger en väldigt tydlig bild över projektet. Även maintainability / complexity-visualisationen uppskattades, även om den är något svår 
      att läsa då man behöver lägga musen över en boll för att få fram information om vilken klass det handlar om.
    </p>
    
    <h2>Berätta hur det gick att integrera med Scrutinizer och vilken är din första känsla av verktyget och dess badges? Vilken kodtäckning och kodkvalitet fick du efter första bygget?</h2>

    <p>
      Scrutinizer var väldigt enkelt att komma igång med, och allting fungerade som det skulle direkt på första försöket. Verktyget verkar mer översiktligt än PHPMetrics, och kanske 
      även lite lättare att förstå och komma igång med. Badges tycker jag ser lite snygga ut att kunna ha med i README-filerna i mina Github repos.
    </p>

    <p> 
      Min kodtäckning låg på runt 30%, mest pga. att jag inte testat mina controllers / entities. Mina egenskrivna klasser (för spel, library osv) låg dock på ca. 96%. Kvalitetsindexet låg
      på 9.91 innan analysen, och på 10 efter avklarade förbättringar.
    </p>
    
    <h2>Hur är din egen syn på kodkvalitet, berätta lite om den? Tror du man kan man påvisa kodkvalitet i någon viss mån med badges eller vad tror du?</h2>

    <p>Som jag nämnde i analysen tror jag att verktyg som detta kan hjälpa till väldigt mycket med att hålla högre kvalitet på sin kod, även om man lätt hamnar i träsket att jaga 
    gröna siffror och fullpoäng mer än att faktiskt fokusera på koden. Jag tror dock att analyserna kan ta reda på rätt mycket man kan ha missat och därför är väldigt hjälpsamma att 
    uppnå högre kodkvalitet.</p>

    <h2>Vilken är din TIL för detta kmom?</h2>

    <p>
      Min TIL är helt enkelt att lära mig mer om kodkvalitet och verktyg som PHPMetrics & Scrutinizer.
    </p>

{% endblock %}